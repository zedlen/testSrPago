Description: >
  This template deploys a VPC, with a pair of public and private subnets spread 
  across two Availabilty Zones. It deploys an Internet Gateway, with a default 
  route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ), 
  and default routes for them in the private subnets.
  It then deploys a highly available ECS cluster using an AutoScaling Group, with 
  ECS hosts distributed across multiple Availability Zones. 
  Finally, it deploys a pair of example ECS services from containers published in 
  Amazon EC2 Container Registry (Amazon ECR).
  Last Modified: 22nd September 2016
  Author: Paul Maddox <pmaddox@amazon.com>

Parameters:
  UsersImage:
    Type: String
  MoviesImage:
    Type: String
  SalesImage:
    Type: String
  BucketName:
    Type: String
Resources:


  CognitoPool:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://s3.amazonaws.com/${BucketName}/infrastructure/cognito-pool.yaml'

  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://s3.amazonaws.com/${BucketName}/infrastructure/vpc.yaml'
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VpcCIDR: 10.180.0.0/16
        PublicSubnet1CIDR: 10.180.8.0/21
        PublicSubnet2CIDR: 10.180.16.0/21
        PrivateSubnet1CIDR: 10.180.24.0/21
        PrivateSubnet2CIDR: 10.180.32.0/21

  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://s3.amazonaws.com/${BucketName}/infrastructure/security-groups.yaml'
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !GetAtt VPC.Outputs.VPC

  ALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://s3.amazonaws.com/${BucketName}/infrastructure/load-balancers.yaml'
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !GetAtt VPC.Outputs.VPC
        Subnets: !GetAtt VPC.Outputs.PublicSubnets
        SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup

  ECS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://s3.amazonaws.com/${BucketName}/infrastructure/ecs-cluster.yaml'
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        InstanceType: t2.large
        ClusterSize: 4
        VPC: !GetAtt VPC.Outputs.VPC
        SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
        Subnets: !GetAtt VPC.Outputs.PrivateSubnets

  UsersService:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://s3.amazonaws.com/${BucketName}/infrastructure/service.yaml'
      Parameters:
        VPC: !GetAtt VPC.Outputs.VPC
        Cluster: !GetAtt ECS.Outputs.Cluster
        DesiredCount: 1
        Listener: !GetAtt ALB.Outputs.Listener
        Path: /users
        Image: !Ref UsersImage
        Port: 3001
        Name: Movies
        Memory: 512
        Cpu: 256
        #PoolId: !Ref CognitoPool.IdentityPoolId
        #AppClientId: !Ref CognitoPool.UserPoolClientId

  MoviesService:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://s3.amazonaws.com/${BucketName}/infrastructure/service.yaml'
      Parameters:
        VPC: !GetAtt VPC.Outputs.VPC
        Cluster: !GetAtt ECS.Outputs.Cluster
        DesiredCount: 1
        Listener: !GetAtt ALB.Outputs.Listener
        Path: /movies
        Image: !Ref MoviesImage
        Port: 3002
        Name: Movie
        Memory: 512
        Cpu: 256
        #PoolId: !Ref CognitoPool.IdentityPoolId
        #AppClientId: !Ref CognitoPool.UserPoolClientId
  
  SalesService:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://s3.amazonaws.com/${BucketName}/infrastructure/service.yaml'
      Parameters:
        VPC: !GetAtt VPC.Outputs.VPC
        Cluster: !GetAtt ECS.Outputs.Cluster
        DesiredCount: 1
        Listener: !GetAtt ALB.Outputs.Listener
        Path: /sales
        Image: !Ref SalesImage
        Port: 3003
        Name: Sales
        Memory: 512
        Cpu: 256
        #PoolId: !Ref CognitoPool.IdentityPoolId
        #AppClientId: !Ref CognitoPool.UserPoolClientId


  

Outputs:
  UsersServiceUrl:
    Description: The URL endpoint for the product service
    Value: !Join ["/", [!GetAtt ALB.Outputs.LoadBalancerUrl, "users"]]

  MoviesServiceUrl:
    Description: The URL endpoint for the website service
    Value: !Join ["/", [!GetAtt ALB.Outputs.LoadBalancerUrl, "movies"]]

  SalesServiceUrl:
    Description: The URL endpoint for the website service
    Value: !Join ["/", [!GetAtt ALB.Outputs.LoadBalancerUrl, "sales"]]